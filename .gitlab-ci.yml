# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2019-2022 VMware, Inc. All rights reserved.
# Copyright (c) 2016-2019 Carbon Black, Inc. All rights reserved.

# Include gitlab-ci-base.yml from cb-build-util.
#  Update the git hash to use a newer version of the base yaml
#  Note: This can be a branch name for testing but should be a git hash/tag for reproducibility
include: 'https://gitlab.bit9.local/cbsensor/cb-build-util/-/raw/kk_coverity2/gitlab-ci-base.yml'

# Gitlab CI configuration script for event-collector-app.
variables:
  ARTIFACTORY_PATH: https://${ARTIFACTORY_URL}/artifactory
  ARTIFACTORY_PROBE_PATH: carbonblack-pub/psc/tests/check_probe/linux/${CI_COMMIT_REF_NAME}
  BUILD_VERSION: ${CI_PIPELINE_ID} # Anything that starts with CI_ comes from gitlab}
  MAKEFILE_TEST_KERNEL_VERSION: 3.10.0-1160.59.1.el7.x86_64

stages:
  - build
  - check_probe
  - build_downstream
  - deploy
  - publish

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'

# Build project
build:
  extends: .build_rule_template
  stage: build

build_coverity:
  extends: .build_coverity_template
  stage: build
  needs:
    - job: build

.run_makefile_build: &run_makefile_build |
  ARTIFACTORY_KERNEL_RPM_PATH=$ARTIFACTORY_PATH/centos-yum-remote-cache/7/updates/x86_64/Packages/kernel-$MAKEFILE_TEST_KERNEL_VERSION.rpm
  ARTIFACTORY_KERNEL_HEADER_RPM_PATH=$ARTIFACTORY_PATH/centos-yum-remote-cache/7/updates/x86_64/Packages/kernel-devel-$MAKEFILE_TEST_KERNEL_VERSION.rpm
  
  # Download and extract the kernel and the header files which will be used to build  
  mkdir localKernelCopy && pushd "$_"
  
  for rpm in $ARTIFACTORY_KERNEL_RPM_PATH $ARTIFACTORY_KERNEL_HEADER_RPM_PATH
  do
    wget $rpm
  done

  for rpmFile in *.rpm
  do
    rpm2cpio $rpmFile | cpio -idmc 
  done

  headerStorageDir="$PWD"
  ln -sf $headerStorageDir/usr/src/kernels/$MAKEFILE_TEST_KERNEL_VERSION $headerStorageDir/lib/modules/$MAKEFILE_TEST_KERNEL_VERSION/build

  popd
  
  mkdir -p kernel_event_collector_module/build && pushd "$_"
  cmake -DLOCAL_BUILD=yes -DKERNEL_NAME=$MAKEFILE_TEST_KERNEL_VERSION -DKERNEL_HEADER_PATH="$headerStorageDir/lib/modules/$MAKEFILE_TEST_KERNEL_VERSION"  ..
  make

makefile_test:
  script: *run_makefile_build
  extends: .build_no_artifacts_template
  stage: build
  when: on_success
  allow_failure: true
  only:
      - master
      - /^release-/
  tags:
    - docker-socket

.deploy_check_probe_pkg: &deploy_check_probe_pkg |
  get_ci_variables
  if [[ ${PACKAGES_TO_BUILD} = *bpf_probe* ]]; then
      echo "Deploying build $ARTIFACTORY_PATH/$ARTIFACTORY_PROBE_PATH/check-probe-${BUILD_VERSION}.tar.gz"
      filename=workspace/bpf_probe/build/install-packages/check-probe-${BUILD_VERSION}.tar.gz
      echo $filename

      curl -s -S -H "X-JFrog-Art-Api:$SVC_GITLAB_ART_PUB_API_KEY" -X PUT "$ARTIFACTORY_PATH/$ARTIFACTORY_PROBE_PATH/" -T  $filename >/dev/null
  else
      echo "Skipping deployment because no new version of bpf_probe was built"
  fi

deploy_probe_test:
  script: *deploy_check_probe_pkg
  stage: check_probe
  tags:
    - artifactory-pub
  variables:
    GIT_STRATEGY: none
  needs:
    - job: build

probe_test:
  stage: check_probe
  script: echo "Placeholder for a real test"
  needs:
    - job: deploy_probe_test

# Build downstream
build_endpoint_common:
  extends: .build_downstream_template
  stage: build_downstream
  variables:
    GIT_STRATEGY: none
    DOWNSTREAM_PACKAGE: 'cbsensor/endpoint-common'
  needs:
    - job: build

deploy_release:
  extends: .deploy_release_template
  stage: deploy
  when: on_success
  needs:
    - job: build

deploy_branch:
  extends: .deploy_branch_template
  stage: deploy
  when: manual
  needs:
    - job: build


publish_to_github:
  stage: publish
  tags:
    - web-access
  before_script:
    - echo "Overriding global build script" > /dev/null
  allow_failure: true
  script:
    - echo "Branch is ${CI_COMMIT_REF_NAME}"
    - git branch -D "${CI_COMMIT_REF_NAME}" &> /dev/null || true
    - git fetch --prune &> /dev/null || true
    - git checkout -B "${CI_BUILD_REF_NAME}" "${CI_BUILD_REF}"
    - git remote add upstream https://github.com/vmware/kernel-event-collector-module.git
    - git config credential.https://github.com.helper "${GITHUB_CREDENTIAL_HELPER}"
    - git push upstream "${CI_BUILD_REF_NAME}"
  only:
    - master
    - /^release-/
