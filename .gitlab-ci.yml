# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2019-2022 VMware, Inc. All rights reserved.
# Copyright (c) 2016-2019 Carbon Black, Inc. All rights reserved.

# Include gitlab-ci-base.yml from cb-build-util.
#  Update the git hash to use a newer version of the base yaml
#  Note: This can be a branch name for testing but should be a git hash/tag for reproducibility
include: 'https://gitlab.bit9.local/cbsensor/cb-build-util/raw/kk_coverity/gitlab-ci-base.yml'

# Gitlab CI configuration script for event-collector-app.
variables:
  ARTIFACTORY_PATH: https://${ARTIFACTORY_URL}/artifactory
  BUILD_VERSION: ${CI_PIPELINE_ID} # Anything that starts with CI_ comes from gitlab}

stages:
  - build_project
  - deploy
  - deploy_release
  - build_downstream
  - deploy_branch
  - publish

# Build project
build_triggered:
  extends: .build_triggered_template
  stage: build_project

build_branch:
  extends: .build_branch_template
  stage: build_project

build_release:
  extends: .build_release_template
  stage: build_project

deploy_release:
  extends: .deploy_release_template
  stage: deploy_release
  when: on_success

.run_makefile_build: &run_makefile_build |
  get_ci_variables
  if [[ ${PACKAGES_TO_BUILD} = *kernel_event_collector* ]]
  then

    yum update -y && yum install -y kernel kernel-devel

    KERNEL_VERSION=$(ls -t /lib/modules | head -1)

    mkdir -p kernel_event_collector_module/build && pushd "$_"
    cmake -DLOCAL_BUILD=yes -DKERNEL_NAME=$KERNEL_VERSION -DKERNEL_HEADER_PATH="/lib/modules/$KERNEL_VERSION"  ..
    make
  fi

makefile_test:
  script: *run_makefile_build
  extends: .build_no_artifacts_template
  stage: deploy
  when: on_success
  allow_failure: false
  tags:
    - docker-socket

.deploy_check_probe_pkg: &deploy_check_probe_pkg |
  get_ci_variables
  if [[ ${PACKAGES_TO_BUILD} = *bpf_probe* ]]; then
      ARTIFACTORY_BASE_PROBE_PATH=carbonblack-pub/psc/tests/check_probe/linux/${CI_COMMIT_REF_NAME}
      for arch in "x86_64" "aarch64"
      do
          ARTIFACTORY_PROBE_PATH=carbonblack-pub/psc/tests/check_probe/linux/${arch}/${CI_COMMIT_REF_NAME}
          echo "Deploying build $ARTIFACTORY_PATH/$ARTIFACTORY_PROBE_PATH/check-probe-${BUILD_VERSION}.tar.gz"
          filename=workspace/bpf_probe/build/install-packages/${arch}/check-probe-${BUILD_VERSION}.tar.gz
          echo $filename

          curl -s -S -H "X-JFrog-Art-Api:$SVC_GITLAB_ART_PUB_API_KEY" -X PUT "$ARTIFACTORY_PATH/$ARTIFACTORY_PROBE_PATH/" -T  $filename >/dev/null

          if [ "${arch}" == "x86_64" ]; then
              echo "Deploying build $ARTIFACTORY_PATH/$ARTIFACTORY_BASE_PROBE_PATH/check-probe-${BUILD_VERSION}.tar.gz"
              curl -s -S -H "X-JFrog-Art-Api:$SVC_GITLAB_ART_PUB_API_KEY" -X PUT "$ARTIFACTORY_PATH/$ARTIFACTORY_BASE_PROBE_PATH/" -T  $filename >/dev/null
          fi
      done
  else
      echo "Skipping deployment because no new version of bpf_probe was built"
  fi

.deploy:
  script: *deploy_check_probe_pkg
  stage: deploy
  tags:
    - artifactory-pub
  variables:
    GIT_STRATEGY: none

deploy_probe_test:
  extends: .deploy

# Build downstream
build_endpoint_common:
  extends: .build_downstream_template
  stage: build_downstream
  variables:
    GIT_STRATEGY: none
    DOWNSTREAM_PACKAGE: 'cbsensor/endpoint-common'

deploy_branch:
  extends: .deploy_branch_template
  stage: deploy_branch
  when: manual

publish_to_github:
  stage: publish
  tags:
    - web-access
  before_script:
    - echo "Overriding global build script" > /dev/null
  allow_failure: true
  script:
    - echo "Branch is ${CI_COMMIT_REF_NAME}"
    - git branch -D "${CI_COMMIT_REF_NAME}" &> /dev/null || true
    - git fetch --prune &> /dev/null || true
    - git checkout -B "${CI_BUILD_REF_NAME}" "${CI_BUILD_REF}"
    - git remote add upstream https://github.com/vmware/kernel-event-collector-module.git
    - git config credential.https://github.com.helper "${GITHUB_CREDENTIAL_HELPER}"
    - git push upstream "${CI_BUILD_REF_NAME}"
  only:
    - master
    - /^release-/
